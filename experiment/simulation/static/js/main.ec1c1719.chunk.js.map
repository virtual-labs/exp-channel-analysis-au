{"version":3,"sources":["Amritalogo.png","vlablogo2.jpg","App.js","reportWebVitals.js","index.js"],"names":["LineChart","Recharts","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","_","require","Fili","bci","App","useState","placeholder","f","a","param_list","data_generation","params","n_channels","sampleRate","duration","amplitudes","frequencies","lowFreq","highFreq","filterOrder","data","raw_data","time","state","setState","handleParamChange","name","value","console","log","className","style","margin","width","Heading","align","Alignment","LEFT","fluid","md","height","top","right","left","bottom","dataKey","range","map","v","type","stroke","dot","vertical","fill","small","onChange","e","target","JSON","stringify","text","onClick","i","Math","floor","random","generateSignal","plot_data","forEach","t","tmp_inst","c","ci","generateData","coeffs","FirCoeffs","bandpass","order","Fs","F1","F2","filter","FirFilter","data_","d","simulate","slice","applyFilter","paddingRight","src","amritalogo","alt","vlablogo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec1c1719.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Amritalogo.74a0debe.png\";","export default __webpack_public_path__ + \"static/media/vlablogo2.00a678a6.jpg\";","import { useState } from 'react'; \nimport './App.css';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport * as Recharts from \"recharts/umd/Recharts\";\nimport { Navbar, Card, Alignment, Label, Divider, InputGroup, Text, Button } from '@blueprintjs/core';\nimport amritalogo from './Amritalogo.png';\nimport vlablogo from './vlablogo2.jpg'\n\nconst LineChart = Recharts.LineChart\nconst Line = Recharts.Line\nconst Cell = Recharts.Cell\nconst XAxis = Recharts.XAxis\nconst YAxis = Recharts.YAxis\nconst CartesianGrid = Recharts.CartesianGrid\nconst Tooltip = Recharts.Tooltip\nconst Legend = Recharts.Legend\nconst ResponsiveContainer = Recharts.ResponsiveContainer;\n\nconst _ = require('lodash');\nconst Fili = require('fili');\nconst bci = require('bcijs/browser');\n\nfunction App() {\n\n  const [tempAmplitude, settempAmplitude] = useState(0);\n  const [tempFrequency, settempFrequency] = useState(0);\n\n  const [state, setState] = useState({\n    placeholder:{\n        f: 0,\n        a: 0\n    },\n    param_list: {\n        data_generation: [ \n            [{'sampleRate': 'Sample Rate'}, {'duration':'Duration'}],\n            [{'amplitudes': \"Amplitude\"}],\n            [ {'frequencies':'Frequencies'}]\n         ]\n    },\n    params:{\n        n_channels: 2,\n        sampleRate: 512,\n        duration: 2,\n        amplitudes: [[8, 4], [9, 7]],\n        frequencies: [[30, 50], [80, 30]],\n        lowFreq : 40,\n        highFreq : 50,\n        filterOrder : 128,\n    },\n    data: [],\n    raw_data: [],\n    time : [],\n  })\n\n  const generateData = () => {\n    let { params } = state;\n    console.log(params)\n    if(params.n_channels > 0){\n      let amplitudes = _.range(params.n_channels).map(i => [ Math.floor(Math.random() * 20) + 1, Math.floor(Math.random() * 20) + 1  ])\n      let frequencies = _.range(params.n_channels).map(i => [ Math.floor(Math.random() * 200) + 1, Math.floor(Math.random() * 200) + 1  ])\n      console.log(amplitudes, frequencies)\n      let data = _.range(params.n_channels).map((_,i) => bci.generateSignal(amplitudes[i], frequencies[i], params.sampleRate, params.duration))\n\n        // let data = bci.generateSignal(params.amplitudes, params.frequencies, params.sampleRate, params.duration)\n        let time = _.range(0, params.duration, params.duration/params.sampleRate)\n        let raw_data = data;\n        let plot_data = [];\n\n        time.forEach((t,i) => {\n          let tmp_inst = {}\n          tmp_inst['time'] = t;\n          data.forEach((c,ci) => tmp_inst['signal-'+ci] = c[i])\n          plot_data = [...plot_data, tmp_inst]\n        })\n\n        setState({\n          ...state,\n          params: { ...state.params, amplitudes , frequencies },\n          data : plot_data,\n          raw_data,\n          time : time,\n        })\n    }else{\n        setState({\n          ...state,\n          data : [],\n          time : [],\n        })\n    }\n\n  }\n\n  const applyFilter = () => {\n\n    let { data, params, raw_data } = state\n\n\n    let { sampleRate } = params;\n    let { lowFreq } = params;\n    let { highFreq } = params;\n    let { filterOrder } = params;\n    let firCalculator = new Fili.FirCoeffs();\n    let coeffs = firCalculator.bandpass({order: filterOrder, Fs: sampleRate, F1: lowFreq, F2: highFreq});\n    let filter = new Fili.FirFilter(coeffs);\n\n    // let data_ = filter.simulate(data).slice(filterOrder)\n    console.log(data)\n    let data_ = raw_data.map(d => filter.simulate(d).slice(filterOrder))\n    console.log(data_)\n    let time = _.range(0, params.duration, params.duration/params.sampleRate)\n\n    let plot_data = [];\n\n    time.forEach((t,i) => {\n      let tmp_inst = {}\n      tmp_inst['time'] = t;\n      data_.forEach((c,ci) => tmp_inst['signal-'+ci] = c[i])\n      plot_data = [...plot_data, tmp_inst]\n    })\n\n    setState({\n        ...state,\n        data: plot_data\n    })\n\n\n\n  }\n\n  const handleParamChange = (name, value)=> {\n    setState({\n      ...state,\n      params: {\n          ...state.params,\n          [name]: value\n      }\n    })\n  }\n  const handleArrayChange = (event, attribute, newElement) => {\n    console.log(event.key)\n    if(event.key === 'Enter'){\n      let dataArray = state.params[attribute]\n      setState({\n        ...state,\n        params: {\n          ...state.params,\n          [attribute]: [ ...dataArray, parseInt(newElement) ]\n        }\n      })\n    }\n  }\n\n// let data = state.time.map((t,i) => ({ 'time': t, 'signal': state.data[i] }))\nlet data = state.data\n\n\nconsole.log(state.data)\n\n\n  return (\n      <div className=\"App bp3-dark\" style={{ margin: \"0 auto\", width: '80%' }}>\n        <Navbar>\n          <Navbar.Heading align={Alignment.LEFT} >Amrita Biosignal Simulator</Navbar.Heading>\n        </Navbar>\n        <Card>\n          <Grid fluid>\n            <Row>\n              <Col md={8}>\n                <ResponsiveContainer>\n                  <LineChart\n                      width={500}\n                      height={300}\n                      data={data}\n                      margin={{\n                      top: 5, right: 30, left: 20, bottom: 5,\n                      }}\n                  >\n                      <CartesianGrid  />\n                      <XAxis dataKey=\"time\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      {\n                        _.range(state.params.n_channels).map(v => <Line type=\"monotone\" dataKey={\"signal-\"+v} stroke=\"#8884d8\" dot={false} /> )\n                      }\n                      {/* <Line type=\"monotone\" dataKey=\"signal\" stroke=\"#8884d8\" dot={false} /> */}\n                  </LineChart>\n                </ResponsiveContainer>\n\n              </Col>\n              <Col md={4}>\n                <Card>\n                  <h5>Run Control</h5>\n                  <Divider vertical />\n                  <Card>\n                    <Grid fluid>\n                      <Row>\n                        <Col md={3}>\n                          <Label>No. of Channels</Label>\n                        </Col>\n                        <Col md={3}>\n                          <InputGroup  fill={false} small value={state.params.n_channels} onChange={(e)=> handleParamChange('n_channels', e.target.value)} />\n                        </Col>\n                      </Row>\n                      <Row>\n                        <Col md={3}>\n                          <Label>Sample Rate</Label>\n                        </Col>\n                        <Col md={3}>\n                          <InputGroup  fill={false} small value={state.params.sampleRate} onChange={(e)=> handleParamChange('sampleRate', e.target.value)} />\n                        </Col>\n                        <Col md={3}>\n                          <Label>Duration</Label>                          \n                        </Col>\n                        <Col md={3}>\n                          <InputGroup fill={false} small value={state.params.duration} onChange={(e)=> handleParamChange('duration', e.target.value)} />\n                        </Col>\n                      </Row>\n                      {/* <Row>\n                        <Col md={3}>\n                          <Label>Amplitude</Label>\n                        </Col>\n                        <Col md={3}>\n                          <InputGroup  fill={false} small onKeyPress={(e)=> handleArrayChange(e,'amplitudes', e.target.value)} value={tempAmplitude} onChange={e=> settempAmplitude(e.target.value) } />\n                        </Col>\n                        <Col md={3}>\n                          <Label>Frequencies</Label>                          \n                        </Col>\n                        <Col md={3}>\n                          <InputGroup fill={false} small  onKeyPress={(e)=> handleArrayChange(e,'frequencies', e.target.value)} value={tempFrequency} onChange={e=> settempFrequency(e.target.value)} />\n                        </Col>\n                      </Row> */}\n                      <Row>\n                        <Col md={6}><Text>{JSON.stringify(state.params.amplitudes)}</Text></Col>\n                        <Col md={6}><Text>{JSON.stringify(state.params.frequencies)}</Text></Col>\n                      </Row>\n                    </Grid>\n                  </Card>\n                </Card>\n                <Divider vertical />\n                <Card>\n                  <h5>Filter</h5>\n                  <Grid fluid>\n                    <Row>\n                      <Col md={3}><Label>LPass</Label></Col>\n                      <Col md={3}><InputGroup small value={state.params.lowFreq} onChange={(e)=> handleParamChange('lowFreq', e.target.value)} /></Col>\n                      <Col md={3}><Label>HPass</Label></Col>\n                      <Col md={3}><InputGroup small value={state.params.highFreq} onChange={(e)=> handleParamChange('highFreq', e.target.value)} /></Col>\n                    </Row>\n                  </Grid>\n                </Card>\n                <Divider vertical />\n                <Button text=\"Generate Data\" onClick={()=>generateData()} />\n                <Button text=\"Apply Filter\" onClick={()=>applyFilter()} />\n              </Col>\n            </Row>\n\n\n          </Grid>\n\n\n\n          <img style ={{ width: '200px', height: '50px', paddingRight: '10px' }} src={amritalogo} alt=\"Amrita\"/>\n          <img style ={{ width: '200px', height: '50px'}} src={vlablogo} alt=\"Amrita\"/>\n        </Card>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}